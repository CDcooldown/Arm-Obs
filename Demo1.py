import sim
import time
from ur3_api import UR3
import numpy as np

import numpy as np
from scipy.interpolate import CubicHermiteSpline

def smooth_trajectory(trajectory, keyframe_interval=10, interpolate_points=None):
    """
    平滑机械臂轨迹
    
    参数:
        trajectory: 原始轨迹序列，形状为 (N, 6) 的列表或数组
        keyframe_interval: 关键帧间隔（每隔多少个点取一个关键帧）
        interpolate_points: 两个关键帧之间的插值点数（默认和原序列相同）
    
    返回:
        平滑后的轨迹序列
    """
    trajectory = np.array(trajectory)
    num_points, num_joints = trajectory.shape
    
    # 选择关键帧
    keyframe_indices = list(range(0, num_points, keyframe_interval))
    if keyframe_indices[-1] != num_points - 1:
        keyframe_indices.append(num_points - 1)
    
    keyframes = trajectory[keyframe_indices]
    num_keyframes = len(keyframes)
    
    # 计算关键帧时间（假设均匀时间间隔）
    t = np.linspace(0, 1, num_keyframes)
    
    # 为每个关节创建平滑轨迹
    smoothed_trajectory = []
    for joint in range(num_joints):
        # 获取关节的关键帧位置
        positions = keyframes[:, joint]
        
        # 计算关键帧速度（中心差分）
        velocities = np.zeros_like(positions)
        velocities[1:-1] = (positions[2:] - positions[:-2]) / (t[2:] - t[:-2])
        # 边界条件（可以根据需要修改）
        velocities[0] = (positions[1] - positions[0]) / (t[1] - t[0])
        velocities[-1] = (positions[-1] - positions[-2]) / (t[-1] - t[-2])
        
        # 创建三次样条插值器
        spline = CubicHermiteSpline(t, positions, velocities)
        
        # 生成插值时间点
        if interpolate_points is None:
            # 保持和原始序列相同的点数
            t_interp = np.linspace(0, 1, num_points)
        else:
            t_interp = np.linspace(0, 1, interpolate_points)
        
        # 插值
        smoothed_joint = spline(t_interp)
        smoothed_trajectory.append(smoothed_joint)
    
    # 转置并组合所有关节
    smoothed_trajectory = np.array(smoothed_trajectory).T
    
    return smoothed_trajectory

ur3_sim = UR3()

ur3_sim.run_coppelia()

# Define all the joint angle steps
joint_steps = [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                [0.02514512, 0.00919982, -0.0702962, -0.02074926, 0.06038828, -0.0162559], 
                [0.0129469, 0.00429615, -0.13671287, -0.01749527, 0.05126699, 0.05669749], 
                [0.00309751, 0.06322597, -0.14874462, -0.03767709, -0.01438213, 0.0963004], 
                [0.04726844, 0.06943923, -0.17785491, -0.07357771, 0.02826741, 0.15997988], 
                [0.09205031, 0.06055662, -0.2373945, -0.04310323, -0.02989645, 0.16766052], 
                [0.15905061, 0.01944575, -0.28323652, -0.05285904, -0.00207352, 0.19681656], 
                [0.237842961, 0.065349162, -0.310211366, -0.0234692601, -0.000110522731, 0.187362148], 
                [0.32322182, 0.05652154, -0.34159553, -0.05648212, 0.00110732, 0.21094658], 
                [0.37296845, 0.09416647, -0.29604571, -0.06220851, -0.06158009, 0.20252978], 
                [0.42271508, 0.1318114, -0.25049588, -0.06793489, -0.1242675, 0.19411298], 
                [0.47246171, 0.16945633, -0.20494605, -0.07366128, -0.18695491, 0.18569618], 
                [0.52220834, 0.20710125, -0.15939622, -0.07938766, -0.24964232, 0.17727938], 
                [0.54407122, 0.2353725, -0.20451877, -0.14005902, -0.28687756, 0.13703973], 
                [0.59345972, 0.27218189, -0.15616095, -0.1429446, -0.34864744, 0.13044259], 
                [0.64284822, 0.30899127, -0.10780313, -0.14583017, -0.41041732, 0.12384546], 
                [0.69223672, 0.34580065, -0.05944532, -0.14871575, -0.4721872, 0.11724833], 
                [0.72103742, 0.36061736, 0.01995122, -0.17691753, -0.48458797, 0.1584558], 
                [0.77053491, 0.39789561, 0.06543079, -0.17826332, -0.54787129, 0.14921727], 
                [0.8200324, 0.43517385, 0.11091036, -0.17960911, -0.61115461, 0.13997874], 
                [0.8739224, 0.48355383, 0.11710489, -0.11337967, -0.61871601, 0.12344515], 
                [0.91247607, 0.47520077, 0.16764873, -0.1014737, -0.68462641, 0.16090484], 
                [0.91732707, 0.51853821, 0.19993823, -0.05346075, -0.72312083, 0.21807703], 
                [0.96591916, 0.55438348, 0.24461338, -0.06437073, -0.78617175, 0.20184099], 
                [1.01451126, 0.59022875, 0.28928853, -0.07528071, -0.84922268, 0.18560496], 
                [1.04634714, 0.52012346, 0.3488354, -0.09790236, -0.84660902, 0.18831123], 
                [1.09268224, 0.56258504, 0.38875643, -0.10693641, -0.91061783, 0.17164863], 
                [1.12183191, 0.52653778, 0.41428453, -0.14530972, -0.95142439, 0.23537869], 
                [1.12402268, 0.59358743, 0.4333562, -0.15293627, -0.96765976, 0.30476215], 
                [1.16962555, 0.63514466, 0.47084692, -0.15774871, -1.02925133, 0.27359906], 
                [1.14692734, 0.68949536, 0.43625246, -0.10781543, -1.07361436, 0.30313898], 
                [1.19563348, 0.72524213, 0.47812881, -0.11842816, -1.13076063, 0.26824018], 
                [1.24433961, 0.7609889, 0.52000515, -0.12904088, -1.1879069, 0.23334138], 
                [1.21710977, 0.79775975, 0.54701401, -0.05973545, -1.23025064, 0.25743967], 
                [1.27040477, 0.83490178, 0.5155482, -0.04473651, -1.28685599, 0.22054953], 
                [1.31893732, 0.84357058, 0.56332941, 0.02700864, -1.29714677, 0.21479344], 
                [1.36362528, 0.87141427, 0.60545564, -0.01339781, -1.34571334, 0.17656123], 
                [1.40831324, 0.89925796, 0.64758188, -0.05380427, -1.39427992, 0.13832903], 
                [1.43597179, 0.94396476, 0.67959026, -0.04282075, -1.38285601, 0.06112393], 
                [1.47855448, 0.96176796, 0.71784617, -0.09275886, -1.44231435, 0.04170397], 
                [1.52113718, 0.97957117, 0.75610208, -0.14269698, -1.5017727, 0.02228402], 
                [1.56371988, 0.99737437, 0.79435799, -0.1926351, -1.56123105, 0.00286407]]

# 示例使用
smoothed_joints = smooth_trajectory(joint_steps)
# Execute each joint position with a small delay between them
for step in smoothed_joints:
# for step in joint_steps:
    ur3_sim.joint_values(step)
    # time.sleep(0.001)  # Adjust this delay as needed for your simulation speed

time.sleep(5)  # Pause at the final position

ur3_sim.stop_simulation()

