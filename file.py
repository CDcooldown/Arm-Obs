def parse_joint_steps(text):
    joint_steps = []
    for line in text.split('\n'):
        line = line.strip()
        if not line.startswith('Step'):
            continue
            
        # 提取中括号内的内容
        start = line.find('[')
        end = line.find(']')
        if start == -1 or end == -1:
            continue
            
        # 处理数字部分
        nums_str = line[start+1:end]
        nums = [float(n) for n in nums_str.split()]
        joint_steps.append(nums)
    
    return joint_steps

# 使用示例
text_data = """Found path with 42 steps:
Step 0: [0 0 0 0 0 0]
Step 1: [ 0.0435512   0.04578427 -0.01483151 -0.03734796  0.03725907 -0.05480886]
Step 2: [ 0.10799741 -0.00081949  0.01038364 -0.08549867  0.0113077  -0.04795271]
Step 3: [ 0.15877986  0.03443372  0.04846954 -0.13692963  0.05463428 -0.06228736]
Step 4: [ 1.98444265e-01  5.54044127e-02  4.40507910e-05 -1.76045649e-01 5.39665951e-02  1.83306072e-03]
Step 5: [ 0.25420041  0.09380388  0.03256366 -0.17701944 -0.01205049  0.00175854]
Step 6: [ 0.30844055  0.13286943  0.03554203 -0.16931369  0.04464189 -0.04567156]
Step 7: [ 0.3998539   0.15607406  0.03161443 -0.14564714  0.03252313 -0.02610762]
Step 8: [ 4.50580008e-01  2.26256993e-01  3.77237644e-03 -1.30069035e-01 6.10432063e-02 -2.23911776e-04]
Step 9: [ 0.49399756  0.23568004 -0.04374464 -0.07634582  0.06486314  0.05332494]
Step 10: [ 0.54497166  0.24315363 -0.05634525 -0.13945687  0.02885647  0.09700017]
Step 11: [ 0.55870879  0.23640766 -0.1293562  -0.14501769 -0.03544707  0.11341103]
Step 12: [ 0.60467551  0.2711156  -0.08711372 -0.14751682 -0.10519786  0.10825611]
Step 13: [ 0.65064223  0.30582354 -0.04487123 -0.15001596 -0.17494865  0.10310118]
Step 14: [ 0.69660895  0.34053148 -0.00262874 -0.1525151  -0.24469945  0.09794625]
Step 15: [ 0.74257567  0.37523942  0.03961374 -0.15501424 -0.31445024  0.09279132]
Step 16: [ 0.78854239  0.40994736  0.08185623 -0.15751338 -0.38420103  0.0876364 ]
Step 17: [ 0.8350729   0.40603533  0.05998505 -0.23513823 -0.41572094  0.06968824]
Step 18: [ 0.87915895  0.44166547  0.1043763  -0.23303039 -0.48496264  0.06550785]
Step 19: [ 0.85726594  0.44612359  0.12657219 -0.23361189 -0.57213276  0.10304712]
Step 20: [ 0.88101668  0.52817722  0.15676181 -0.26338054 -0.59362117  0.08198132]
Step 21: [ 0.91208124  0.51749994  0.15843963 -0.1985352  -0.62660831  0.02177247]
Step 22: [ 0.95898307  0.5518965   0.2041753  -0.19863962 -0.69386099  0.02022035]
Step 23: [ 0.99426484  0.6144454   0.2473165  -0.15972672 -0.70619572  0.05648755]
Step 24: [ 1.04071091  0.6455491   0.29190293 -0.16297567 -0.77588108  0.05193055]
Step 25: [ 1.08715698  0.67665281  0.33648937 -0.16622462 -0.84556645  0.04737355]
Step 26: [ 1.06362299  0.73892543  0.33441651 -0.14896492 -0.90154903  0.00119966]
Step 27: [ 1.07106107  0.79977535  0.30622886 -0.11902929 -0.96343668  0.02805474]
Step 28: [ 1.04564637  0.82195514  0.27867471 -0.18039612 -1.01505218 -0.01284601]
Step 29: [ 1.10132344  0.84086035  0.33403022 -0.18247771 -1.07397781 -0.01148199]
Step 30: [ 1.15700051  0.85976556  0.38938574 -0.18455929 -1.13290344 -0.01011797]
Step 31: [ 1.21267758  0.87867077  0.44474125 -0.18664088 -1.19182908 -0.00875395]
Step 32: [ 1.26835465  0.89757599  0.50009677 -0.18872246 -1.25075471 -0.00738993]
Step 33: [ 1.32403172  0.9164812   0.55545228 -0.19080405 -1.30968034 -0.00602591]
Step 34: [ 1.32737415  0.86623651  0.5826332  -0.12800289 -1.35802515 -0.02710414]
Step 35: [ 1.37519005  0.85050836  0.6386173  -0.13410766 -1.32951803 -0.08611364]
Step 36: [ 1.42452373  0.88836563  0.67948587 -0.15079424 -1.3904177  -0.06430622]
Step 37: [ 1.47385742  0.92622291  0.72035443 -0.16748082 -1.45131737 -0.04249879]
Step 38: [ 1.5231911   0.96408018  0.76122299 -0.1841674  -1.51221704 -0.02069137]"""

joint_sequence = parse_joint_steps(text_data)
print(joint_sequence)